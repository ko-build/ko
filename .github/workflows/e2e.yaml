name: Basic e2e test

on:
  pull_request:
    branches: ['main']

jobs:
  e2e:
    strategy:
      fail-fast: false
      matrix:
        platform:
        - ubuntu-latest
        - windows-latest
    name: e2e ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: 1.17
        check-latest: true

    - name: Build and run ko container
      env:
        KO_DOCKER_REPO: ko.local
      shell: bash
      run: |
        set -euxo pipefail

        # eval `go env`, compatible with Windows and Linux
        # cribbed from https://gist.github.com/Syeberman/39d81b1e17d091be5657ecd6fbff0753
        eval $(go env | sed -r 's/^(set )?(\w+)=("?)(.*)\3$/\2="\4"/gm')

        export PLATFORM=${GOOS}/${GOARCH}

        if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
          OSVERSION="10.0.20348"
          PLATFORM=${PLATFORM}:${OSVERSION}
          export KO_DEFAULTBASEIMAGE=mcr.microsoft.com/windows/nanoserver:ltsc2022
        else
          # Explicitly test multiple platform builds (a subset of what's in the base!)
          export PLATFORM=${PLATFORM},linux/arm64
        fi

        echo platform is ${PLATFORM}
        # Build and run the ko binary, which should be runnable.
        docker run $(go run ./ build ./ --platform=${PLATFORM} --preserve-import-paths) version

        # Build and run the test/ binary, which should log "Hello there" served from KO_DATA_PATH
        testimg=$(go run ./ build ./test --platform=${PLATFORM} --preserve-import-paths)
        docker run ${testimg} --wait=false 2>&1 | grep "Hello there"

        # Check that symlinks in kodata are chased.
        # Skip this test on Windows.
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          docker run ${testimg} --wait=false -f HEAD
        fi

        # Check that using ldflags to set variables works.
        cat > .ko.yaml << EOF
        builds:
        - id: test
          main: ./test/
          ldflags:
          - "-X main.version=${{ github.sha }}"
        EOF
        docker run $(go run ./ build ./test/ --platform=${PLATFORM}) --wait=false 2>&1 | grep "${{ github.sha }}"

