name: goreleaser

on:
  push:
    tags:
      - '*'

jobs:
  goreleaser:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      tag_name: ${{ steps.tag.outputs.tag_name }}

    permissions:
      packages: write
      id-token: write
      contents: write

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0

      - run: git fetch --prune --unshallow

      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: '1.20'
          check-latest: true

      # This installs the current latest release.
      - uses: ko-build/setup-ko@ace48d793556083a76f1e3e6068850c1f4a369aa # v0.6

      - uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # v0.3

      - uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65 # v3.0.1

      - name: Set tag output
        id: tag
        run: echo "tag_name=${GITHUB_REF#refs/*/}" >> "$GITHUB_OUTPUT"

      - uses: goreleaser/goreleaser-action@f82d6c1c344bcacabba2c841718984797f664a6b # v4.2.0
        id: run-goreleaser
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: sign ko-image
        run: |
          digest=$(crane digest "${REGISTRY}":"${GIT_TAG}")
          cosign sign --yes \
              -a GIT_HASH="${GIT_HASH}" \
              -a GIT_TAG="${GIT_TAG}" \
              -a RUN_ID="${RUN_ID}" \
              -a RUN_ATTEMPT="${RUN_ATTEMPT}" \
              "${REGISTRY}@${digest}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_HASH: ${{ github.sha }}
          GIT_TAG: ${{ steps.tag.outputs.tag_name }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
          RUN_ID: ${{ github.run_id }}
          REGISTRY: "ghcr.io/${{ github.repository }}"

      - name: Generate subject
        id: hash
        env:
          ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail

          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
          echo "hashes=$(cat $checksum_file | base64 -w0)" >> "$GITHUB_OUTPUT"

  provenance:
    needs:
      - goreleaser

    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.

    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.5.0
    with:
      base64-subjects: "${{ needs.goreleaser.outputs.hashes }}"
      upload-assets: true
      upload-tag-name: "${{ needs.release.outputs.tag_name }}"

  verification:
    needs:
      - goreleaser
      - provenance

    runs-on: ubuntu-latest
    env:
      ATT_FILE_NAME: "attestation.intoto.jsonl"
    permissions: read-all

    steps:

      - name: Install SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.0.1

      - name: Download assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROVENANCE: "${{ needs.provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail

          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "*.tar.gz"
          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "$PROVENANCE"

      - name: Verify assets
        env:
          CHECKSUMS: ${{ needs.goreleaser.outputs.hashes }}
          PROVENANCE: "${{ needs.provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail

          checksums=$(echo "$CHECKSUMS" | base64 -d)
          while read -r line; do
              artifact=$(echo $line | cut -d ' ' -f2)
              
              echo "Verifying $fn using $ATT_FILE_NAME"
              slsa-verifier verify-artifact --provenance-path "$ATT_FILE_NAME" \
                                            --source-uri "github.com/$GITHUB_REPOSITORY" \
                                            --source-tag "$GITHUB_REF_NAME" \
                                            "$artifact"

          done <<<"$checksums"
